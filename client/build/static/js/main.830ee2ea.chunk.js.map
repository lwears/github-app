{"version":3,"sources":["components/SearchBar.js","components/Header.js","components/RepoCard.js","components/UserCard.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","query","React","createRef","queryType","search","className","onSubmit","e","preventDefault","current","value","name","id","ref","type","Header","RepoCard","repo","owner","description","language","created_at","updated_at","html_url","homepage","publicRepo","href","login","src","avatar_url","alt","UserCard","user","followers","following","public_repos","bio","Board","display","repos","map","key","App","useState","repositories","setRepositories","setUser","queryTerm","a","axios","get","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.830ee2ea.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/SearchBar.css';\n\nexport default function SearchBar(props) {\n  const query = React.createRef();\n  const queryType = React.createRef();\n  const { search } = props;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    search(query.current.value, queryType.current.value);\n    query.current.value = '';\n  };\n\n  return (\n    <form className='search' onSubmit={handleSubmit}>\n      <select name='query-type' id='query-type' ref={queryType}>\n        <option value='Repository'>Repository</option>\n        <option value='User'>User</option>\n      </select>\n      <input type='text' id='search' ref={query} />\n      <input type='submit' value='Search' />\n    </form>\n  );\n}\n\nSearchBar.propTypes = {\n  search: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBar from './SearchBar';\nimport '../css/Header.css';\n\nexport default function Header(props) {\n  const { search } = props;\n  return (\n    <header>\n      <h1 className='page-header'>Repo & User Searcher</h1>\n      <SearchBar search={search} />\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  search: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/RepoCard.css';\n\nexport default function RepoCard({ repo }) {\n  const {\n    owner,\n    name,\n    description,\n    language,\n    created_at,\n    updated_at,\n    html_url,\n    homepage,\n    publicRepo,\n  } = repo;\n\n  return (\n    <a className='no-style' href={html_url}>\n      <div className='repo-card'>\n        <div className='container left border-right'>\n          <h2>{owner.login}</h2>\n          <img className='user-image' src={owner.avatar_url} alt='Repository owner Avatar' />\n          <a href={owner.html_url}>\n            <button type='button' className='link-button'>\n              User Github\n            </button>\n          </a>\n        </div>\n        <div className='container right'>\n          <h2>{name}</h2>\n          <p>{description}</p>\n          <p>{language}</p>\n          <p>\n            <strong>Created: </strong>\n            {created_at}\n          </p>\n          <p>\n            <strong>Last Updated: </strong>\n            {updated_at}\n          </p>\n          <p>\n            Repo is\n            {publicRepo ? ' public' : ' private'}\n          </p>\n          <div className='links'>\n            <a href={html_url}>\n              <button type='button' className='link-button'>\n                Repo Link\n              </button>\n            </a>\n            <a href={homepage}>\n              <button type='button' className='link-button'>\n                Live Link\n              </button>\n            </a>\n          </div>\n        </div>\n      </div>\n    </a>\n  );\n}\n\nRepoCard.propTypes = {\n  repo: PropTypes.shape({\n    owner: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    language: PropTypes.string,\n    created_at: PropTypes.string,\n    updated_at: PropTypes.string,\n    html_url: PropTypes.string,\n    homepage: PropTypes.string,\n    publicRepo: PropTypes.bool,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/UserCard.css';\n\nexport default function UserCard({ user }) {\n  const {\n    login,\n    html_url,\n    avatar_url,\n    followers,\n    following,\n    public_repos,\n    bio,\n    created_at,\n    name,\n  } = user;\n\n  return (\n    <div className='user-card'>\n      <div className='container left border-right'>\n        <p>\n          <strong>Joined: </strong>\n          {created_at}\n        </p>\n        <img className='user-image' src={avatar_url} alt='Repository owner Avatar' />\n        <a href={html_url}>\n          <button type='button' className='user-link'>\n            GitHub Link\n          </button>\n        </a>\n      </div>\n      <div className='container right'>\n        <div>\n          <h1>{name}</h1>\n          <h4>{login}</h4>\n        </div>\n        {bio ? <p>{bio}</p> : ''}\n        <div className='stats'>\n          <div className='stat'>\n            <h4>Followers:</h4>\n            <p>{followers}</p>\n          </div>\n          <div className='stat'>\n            <h4>Following:</h4>\n            <p>{following}</p>\n          </div>\n          <div className='stat'>\n            <h4>Repositories:</h4>\n            <p>{public_repos}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nUserCard.propTypes = {\n  user: PropTypes.shape({\n    owner: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    language: PropTypes.string,\n    created_at: PropTypes.string,\n    updated_at: PropTypes.string,\n    html_url: PropTypes.string,\n    homepage: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RepoCard from './RepoCard';\nimport UserCard from './UserCard';\nimport '../css/Board.css';\n\nexport default function Board({ repos, user }) {\n  let display;\n\n  if (repos) {\n    display = repos.map((repo) => <RepoCard repo={repo} key={repo.id} />);\n  } else if (user) {\n    display = <UserCard user={user} />;\n  } else {\n    display = '';\n  }\n\n  return <div className='board'>{display}</div>;\n}\n\nBoard.propTypes = {\n  repos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      full_name: PropTypes.string,\n      homepage: PropTypes.string,\n      url: PropTypes.string,\n      description: PropTypes.string,\n      private: PropTypes.string,\n      updated_at: PropTypes.string,\n      created_at: PropTypes.string,\n      language: PropTypes.string,\n      owner: PropTypes.shape({\n        login: PropTypes.string,\n        avatar_url: PropTypes.string,\n        html_url: PropTypes.string,\n      }),\n    })\n  ).isRequired,\n  user: PropTypes.shape({\n    login: PropTypes.string,\n    id: PropTypes.number,\n    avatar_url: PropTypes.string,\n    html_url: PropTypes.string,\n    public_repos: PropTypes.string,\n    followers: PropTypes.string,\n    following: PropTypes.string,\n    created_at: PropTypes.string,\n    bio: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport Board from './components/Board';\n\nfunction App() {\n  const [repositories, setRepositories] = useState(null);\n  const [user, setUser] = useState(null);\n\n  const search = async (queryTerm, queryType) => {\n    if (queryType === 'Repository') {\n      const data = await axios.get(`/api/repos/${queryTerm}`);\n      setUser(false);\n      setRepositories(data.data);\n    }\n    if (queryType === 'User') {\n      const data = await axios.get(`/api/users/${queryTerm}`);\n      setRepositories(false);\n      setUser(data.data);\n    }\n  };\n\n  return (\n    <div>\n      <Header search={search} />\n      {repositories ? <Board repos={repositories} /> : user ? <Board user={user} /> : ''}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}