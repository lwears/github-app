{"version":3,"sources":["components/SearchBar.js","components/Header.js","components/Card.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","searchInput","React","createRef","search","className","onSubmit","e","preventDefault","current","value","type","id","ref","Header","Card","repo","name","Board","useState","repos","map","key","App","searchResults","setSearchResults","searchRepos","a","axios","get","data","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wVAGe,SAASA,EAAOC,GAC7B,IAAMC,EAAcC,IAAMC,YAClBC,EAAWJ,EAAXI,OAOR,OACE,0BAAMC,UAAU,SAASC,SANN,SAACC,GACpBA,EAAEC,iBACFJ,EAAOH,EAAYQ,QAAQC,SAKzB,2BAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKZ,IACpC,2BAAOU,KAAK,SAASD,MAAM,Y,MCXlB,SAASI,EAAOd,GAAQ,IAC7BI,EAAWJ,EAAXI,OACR,OACE,gCACE,6CACA,kBAACL,EAAD,CAAWK,OAAQA,KCPV,SAASW,EAAKf,GAAQ,IAC3BgB,EAAShB,EAATgB,KAER,OACE,yBAAKX,UAAU,aACb,2BAAIW,EAAKC,MACT,6B,MCJS,SAASC,EAAMlB,GAAQ,IAAD,EACTmB,mBAASnB,EAAMoB,OADN,mBAC5BA,EAD4B,UAGnC,OACE,yBAAKf,UAAU,cACZe,EAAQA,EAAMC,KAAI,SAACL,GAAD,OAAU,kBAACD,EAAD,CAAMC,KAAMA,EAAMM,IAAKN,EAAKJ,QAAU,I,MCe1DW,MAlBf,WAAgB,IAAD,EAC6BJ,mBAAS,MADtC,mBACNK,EADM,KACSC,EADT,KAGPC,EAAW,uCAAG,WAAOtB,GAAP,eAAAuB,EAAA,sEACCC,IAAMC,IAAN,eAAkBzB,IADnB,OACZ0B,EADY,OAElBL,EAAiBK,EAAKA,MAFJ,2CAAH,sDAKXC,EAAUP,EAAgB,kBAACN,EAAD,CAAOE,MAAOI,IAAoB,GAElE,OACE,6BACE,kBAACV,EAAD,CAAQV,OAAQsB,IACfK,ICPaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73559d57.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/search.css';\n\nexport default function Search(props) {\n  const searchInput = React.createRef();\n  const { search } = props;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    search(searchInput.current.value);\n  };\n\n  return (\n    <form className=\"search\" onSubmit={handleSubmit}>\n      <input type=\"text\" id=\"search\" ref={searchInput} />\n      <input type=\"submit\" value=\"Search\" />\n    </form>\n  );\n}\n","import React from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport \"../css/header.css\";\n\nexport default function Header(props) {\n  const { search } = props;\n  return (\n    <header>\n      <h1>Repo Searcher</h1>\n      <SearchBar search={search} />\n    </header>\n  );\n}\n","import React from 'react';\n\nexport default function Card(props) {\n  const { repo } = props;\n\n  return (\n    <div className=\"repo-card\">\n      <p>{repo.name}</p>\n      <p></p>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Card from './Card';\nimport '../css/board.css';\n\nexport default function Board(props) {\n  const [repos, setRepos] = useState(props.repos);\n\n  return (\n    <div className=\"repo-board\">\n      {repos ? repos.map((repo) => <Card repo={repo} key={repo.id} />) : ''}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport Board from './components/Board';\nimport './App.css';\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState(null);\n\n  const searchRepos = async (search) => {\n    const data = await axios.get(`/api/${search}`);\n    setSearchResults(data.data);\n  };\n\n  const display = searchResults ? <Board repos={searchResults} /> : '';\n\n  return (\n    <div>\n      <Header search={searchRepos} />\n      {display}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}